# Script PowerShell para configura√ß√£o do banco PostgreSQL local
# Sistema Cara Core Agendamento (CCA)

Write-Host "üè• Configurando banco PostgreSQL local para CCA..." -ForegroundColor Green

# Verificar se o PostgreSQL est√° instalado
if (-not (Get-Command psql -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå PostgreSQL n√£o est√° instalado." -ForegroundColor Red
    Write-Host "üì¶ Instale o PostgreSQL primeiro:" -ForegroundColor Yellow
    Write-Host "   - Windows: https://www.postgresql.org/download/windows/" -ForegroundColor Cyan
    Write-Host "   - Chocolatey: choco install postgresql" -ForegroundColor Cyan
    Write-Host "   - Scoop: scoop install postgresql" -ForegroundColor Cyan
    exit 1
}

# Verificar se o PostgreSQL est√° rodando
$pgService = Get-Service -Name "*postgresql*" -ErrorAction SilentlyContinue | Where-Object { $_.Status -eq "Running" }
if (-not $pgService) {
    Write-Host "‚ö†Ô∏è  PostgreSQL n√£o est√° rodando." -ForegroundColor Yellow
    Write-Host "üöÄ Tentando iniciar PostgreSQL..." -ForegroundColor Blue
    
    try {
        $pgService = Get-Service -Name "*postgresql*" | Select-Object -First 1
        Start-Service $pgService.Name
        Write-Host "‚úÖ PostgreSQL iniciado com sucesso." -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå N√£o foi poss√≠vel iniciar o PostgreSQL automaticamente." -ForegroundColor Red
        Write-Host "   Inicie manualmente e execute este script novamente." -ForegroundColor Yellow
        exit 1
    }
}

Write-Host "‚úÖ PostgreSQL est√° rodando." -ForegroundColor Green

# Configurar vari√°veis
$DB_NAME = "cca_local"
$DB_USER = "cca_user"
$DB_PASSWORD = "cca_password"

Write-Host "üìù Configura√ß√£o:" -ForegroundColor Blue
Write-Host "   - Banco: $DB_NAME" -ForegroundColor Cyan
Write-Host "   - Usu√°rio: $DB_USER" -ForegroundColor Cyan
Write-Host "   - Senha: $DB_PASSWORD" -ForegroundColor Cyan

# Definir PGPASSWORD para comandos PostgreSQL
$env:PGPASSWORD = "postgres"  # Assumindo senha padr√£o do postgres

# Verificar se o usu√°rio existe
try {
    $userExists = psql -h localhost -U postgres -d postgres -tAc "SELECT 1 FROM pg_roles WHERE rolname='$DB_USER'" 2>$null
    if ($userExists -eq "1") {
        Write-Host "‚ö†Ô∏è  Usu√°rio '$DB_USER' j√° existe." -ForegroundColor Yellow
        $recreateUser = Read-Host "ü§î Deseja recriar o usu√°rio? (s/N)"
        if ($recreateUser -match "^[Ss]$") {
            Write-Host "üóëÔ∏è  Removendo usu√°rio existente..." -ForegroundColor Yellow
            dropuser -h localhost -U postgres $DB_USER 2>$null
            $userExists = $null
        }
        else {
            Write-Host "‚è≠Ô∏è  Mantendo usu√°rio existente." -ForegroundColor Blue
        }
    }
}
catch {
    Write-Host "‚ö†Ô∏è  Erro ao verificar usu√°rio. Tentando criar..." -ForegroundColor Yellow
    $userExists = $null
}

# Verificar se o banco existe
try {
    $dbExists = psql -h localhost -U postgres -lqt 2>$null | Select-String $DB_NAME
    if ($dbExists) {
        Write-Host "‚ö†Ô∏è  Banco '$DB_NAME' j√° existe." -ForegroundColor Yellow
        $recreateDb = Read-Host "ü§î Deseja recriar o banco? (s/N)"
        if ($recreateDb -match "^[Ss]$") {
            Write-Host "üóëÔ∏è  Removendo banco existente..." -ForegroundColor Yellow
            dropdb -h localhost -U postgres $DB_NAME 2>$null
            $dbExists = $null
        }
        else {
            Write-Host "‚è≠Ô∏è  Mantendo banco existente." -ForegroundColor Blue
        }
    }
}
catch {
    Write-Host "‚ö†Ô∏è  Erro ao verificar banco. Tentando criar..." -ForegroundColor Yellow
    $dbExists = $null
}

# Criar usu√°rio se necess√°rio
if (-not $userExists -or $recreateUser -match "^[Ss]$") {
    Write-Host "üë§ Criando usu√°rio $DB_USER..." -ForegroundColor Blue
    try {
        createuser -h localhost -U postgres -d -r -s $DB_USER
        psql -h localhost -U postgres -c "ALTER USER $DB_USER PASSWORD '$DB_PASSWORD';"
        Write-Host "‚úÖ Usu√°rio criado com sucesso." -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå Erro ao criar usu√°rio: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Criar banco se necess√°rio
if (-not $dbExists) {
    Write-Host "üèóÔ∏è  Criando banco $DB_NAME..." -ForegroundColor Blue
    try {
        createdb -h localhost -U postgres -O $DB_USER $DB_NAME
        Write-Host "‚úÖ Banco criado com sucesso." -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå Erro ao criar banco: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Conceder permiss√µes
Write-Host "üîê Configurando permiss√µes..." -ForegroundColor Blue
try {
    psql -h localhost -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"
    Write-Host "‚úÖ Permiss√µes configuradas." -ForegroundColor Green
}
catch {
    Write-Host "‚ö†Ô∏è  Erro ao configurar permiss√µes." -ForegroundColor Yellow
}

# Testar conex√£o
Write-Host "üîç Testando conex√£o..." -ForegroundColor Blue
$env:PGPASSWORD = $DB_PASSWORD
try {
    $result = psql -h localhost -U $DB_USER -d $DB_NAME -c "SELECT version();" 2>$null
    if ($result) {
        Write-Host "‚úÖ Conex√£o testada com sucesso!" -ForegroundColor Green
    }
    else {
        throw "Conex√£o falhou"
    }
}
catch {
    Write-Host "‚ùå Erro ao testar conex√£o." -ForegroundColor Red
    Write-Host "   Verifique as configura√ß√µes e tente novamente." -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üéâ Configura√ß√£o conclu√≠da!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Para usar o banco PostgreSQL local:" -ForegroundColor Blue
Write-Host "   mvn spring-boot:run '-Dspring.profiles.active=local'" -ForegroundColor Cyan
Write-Host ""
Write-Host "üîß Vari√°veis de ambiente (opcional):" -ForegroundColor Blue
Write-Host "   `$env:DB_USERNAME='$DB_USER'" -ForegroundColor Cyan
Write-Host "   `$env:DB_PASSWORD='$DB_PASSWORD'" -ForegroundColor Cyan
Write-Host ""
Write-Host "üåê Conex√£o:" -ForegroundColor Blue
Write-Host "   Host: localhost" -ForegroundColor Cyan
Write-Host "   Porta: 5432" -ForegroundColor Cyan
Write-Host "   Banco: $DB_NAME" -ForegroundColor Cyan
Write-Host "   Usu√°rio: $DB_USER" -ForegroundColor Cyan
Write-Host "   Senha: $DB_PASSWORD" -ForegroundColor Cyan
Write-Host ""
Write-Host "üíª Comando para conectar manualmente:" -ForegroundColor Blue
Write-Host "   psql -h localhost -U $DB_USER -d $DB_NAME" -ForegroundColor Cyan
Write-Host ""

# Limpar vari√°vel de ambiente
Remove-Item Env:PGPASSWORD -ErrorAction SilentlyContinue
